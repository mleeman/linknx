#!/bin/sh
### BEGIN INIT INFO
# Provides:          linknx
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the linknx backend
# Description:       This file is the backend for linknx
### END INIT INFO

# Author: Marc Leeman <marc.leeman@gmail.com>
#
# Copyright (c) 2009 GPLv2 or later
#
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="LinKNX backend"
NAME=linknx
DAEMON=/usr/bin/$NAME
LOGDIR=/var/log/knx/
DAEMONUSER="knx"
DAEMON_ARGS="--daemon=$LOGDIR/linknx.log --pid-file=/var/run/knx/linknx.pid"
PIDFILE=/var/run/knx/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

mkdir -p /var/run/knx/
#
# Check permission of log dir
#
check_log_dir() {
	# Does the logging directory belong to knx?
	# If we cannot determine the logdir return without error
	# (we will not check it)
	[ -n "$LOGDIR" ] || return 0
	[ -n "$DAEMONUSER" ] || return 0
	if [ ! -e "$LOGDIR" ] ; then
		log_failure_msg "ERR: logging directory $LOGDIR does not exist"
		return 1
	elif [ ! -d "$LOGDIR" ] ; then
		log_failure_msg "ERR: logging directory $LOGDIR does not exist"
		return 1
	else
		real_log_user=`stat -c %U $LOGDIR`
		# An alternative way is to check if the knx user can create
		# a file there...
		if [ "$real_log_user" != "$DAEMONUSER" ] ; then
			log_failure_msg "ERR: logging directory $LOGDIR does not belong to the knx user $DAEMONUSER"
			return 1
		fi
	fi
	return 0
}


#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	if [ "$START_LINKNX" = "NO"  ]; then
		log_warning_msg "$DESC disabled via /etc/default/$NAME"
		exit 0
	else
		start-stop-daemon --start --quiet --chuid $DAEMONUSER --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
			|| return 1
		start-stop-daemon --start --quiet --chuid $DAEMONUSER --pidfile $PIDFILE --exec $DAEMON -- \
			$DAEMON_ARGS $REMOTE_ARGS\
			|| return 2
	fi
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/9 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	if [ "$START_LINKNX" = "NO"  ]; then
		log_warning_msg "$DESC disabled via /etc/default/$NAME"
		exit 0
	else
		if ! check_log_dir; then
			log_failure_msg " will not start $DESC!"
			exit 5
	  fi

		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
	fi
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	if [ "$START_LINKNX" = "NO"  ]; then
		log_warning_msg "$DESC disabled via /etc/default/$NAME"
		exit 0
	else
		if ! check_log_dir; then
			log_failure_msg " will not restart $DESC!"
			exit 5
	  fi

		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
		  0|1)
			do_start
			case "$?" in
				0) log_end_msg 0 ;;
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
		  *)
			# Failed to stop
			log_end_msg 1
			;;
		esac
	fi
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
